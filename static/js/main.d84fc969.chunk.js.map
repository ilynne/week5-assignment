{"version":3,"sources":["CharacterPolaroid.js","Character.js","CharacterPageNavigator.js","CharacterList.js","CharacterDetail.js","Navigation.js","App.js","serviceWorker.js","index.js"],"names":["CharacterPolaroid","props","image","name","created","className","src","alt","Character","this","character","id","to","React","Component","CharacterPageNavigator","handleNextPrevClick","e","setCharacterListPageNumber","target","value","characterListPageNumber","pages","info","pageNumbers","Array","keys","onClick","disabled","onChange","map","pageNumber","key","CharacterList","state","isLoading","response","results","getCharacters","setState","fetch","then","result","json","data","componentDidMount","Number","CharacterDetail","getCharacter","match","params","species","gender","status","location","origin","episode","locationName","originName","episodeCount","length","colSpan","Navigation","App","path","exact","component","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d84fc969.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function CharacterPolaroid(props) {\n  const { image, name, created } = props\n  return (\n    <div className={'character-container'}>\n      <div className={'character-image-container'}>\n        <img src={image} alt={`portrait of ${name}`}></img>\n        <p className={'image-time-stamp'}>{created}</p>\n      </div>\n      <div className={'caption'}>{name}</div>\n    </div>\n  )\n}\n\nCharacterPolaroid.propTypes = {\n  created: PropTypes.string,\n  image: PropTypes.string,\n  name: PropTypes.string,\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport CharacterPolaroid from './CharacterPolaroid';\n\nexport default class Character extends React.Component {\n  static propTypes = {\n    character: PropTypes.shape({\n      created: PropTypes.string.isRequired,\n      episode: PropTypes.arrayOf(PropTypes.string),\n      gender: PropTypes.string,\n      id: PropTypes.number.isRequired,\n      image: PropTypes.string.isRequired,\n      location: PropTypes.shape({\n        name: PropTypes.string,\n        url: PropTypes.string,\n      }),\n      origin: PropTypes.shape({\n        name: PropTypes.string,\n        url: PropTypes.string,\n      }),\n      species: PropTypes.string,\n      status: PropTypes.string,\n      type: PropTypes.string,\n      url: PropTypes.string,\n    })\n  }\n\n  render() {\n    const { id, name, image, created } = this.props.character\n    return (\n      <Link to={`/week5-assignment/character/${id}`}>\n        <CharacterPolaroid\n          name={name}\n          image={image}\n          created={created}\n        >\n        </CharacterPolaroid>\n      </Link>\n    )\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class CharacterPageNavigator extends React.Component {\n  static propTypes = {\n    characterListPageNumber: PropTypes.number.isRequired,\n    info: PropTypes.shape({\n      count: PropTypes.number,\n      next: PropTypes.string,\n      pages: PropTypes.number,\n      prev: PropTypes.string,\n    }),\n    setCharacterListPageNumber: PropTypes.func.isRequired,\n  }\n\n  handleNextPrevClick = (e) => {\n    this.props.setCharacterListPageNumber(e.target.value)\n  }\n\n  render() {\n    const { characterListPageNumber } = this.props\n    const { pages } = this.props.info;\n    const pageNumbers = [...Array(pages).keys()]\n\n    return (\n      <div className={'character-list-navigator'}>\n        <span>Go to page:</span>\n        <button value={1}\n                onClick={this.handleNextPrevClick}\n                disabled={characterListPageNumber === 1}>First</button>\n        <button value={characterListPageNumber - 1}\n                onClick={this.handleNextPrevClick}\n                disabled={characterListPageNumber === 1}>Prev</button>\n        <select name={'page-selector'}\n                value={characterListPageNumber}\n                onChange={this.handleNextPrevClick}\n        >\n          {pageNumbers.map(pageNumber=> (\n            <option\n              value={pageNumber+1}\n              key={`page-number${pageNumber}`}\n            >\n              {pageNumber+1}\n            </option>\n          ))}\n        </select>\n        <button value={characterListPageNumber + 1}\n                onClick={this.handleNextPrevClick}\n                disabled={characterListPageNumber === pages}>Next</button>\n        <button value={pages}\n                onClick={this.handleNextPrevClick}\n                disabled={characterListPageNumber === pages}>Last</button>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport Character from './Character';\nimport CharacterPageNavigator from './CharacterPageNavigator';\n\nexport default class CharacterList extends React.Component {\n  state = {\n    isLoading: false,\n    response: {\n      info: {},\n      results: []\n    },\n    characterListPageNumber: 1,\n    pages: 1\n  }\n\n  getCharacters = () => {\n    this.setState({ isLoading: true }, () => {\n      fetch(`https://rickandmortyapi.com/api/character/?page=${this.state.characterListPageNumber}`)\n        .then(result => result.json())\n        .then(data => this.setState({ response: data, isLoading: false }))\n    });\n  }\n\n  componentDidMount = () => {\n    this.getCharacters();\n  }\n\n  setCharacterListPageNumber = (characterListPageNumber) => {\n    this.setState({\n      characterListPageNumber: Number(characterListPageNumber)\n    }, this.getCharacters())\n  }\n\n\n  render() {\n    const { response } = this.state\n    const { results, info } = response\n    return (\n      <div>\n        <CharacterPageNavigator\n          info={info}\n          characterListPageNumber={this.state.characterListPageNumber}\n          setCharacterListPageNumber={this.setCharacterListPageNumber}\n        >\n        </CharacterPageNavigator>\n        <div className={'character-list-container'}>\n          { this.state.isLoading\n            ? <p>Loading characters...</p>\n            : results.map(character => (\n              <Character\n                key={character.id}\n                character={character}\n              >\n              </Character>\n            ))\n          }\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport CharacterPolaroid from './CharacterPolaroid';\n\nexport default class CharacterDetail extends React.Component {\n  state = {\n    isLoading: false,\n    response: {}\n  }\n\n  getCharacter = () => {\n    const { id } = this.props.match.params;\n    this.setState({ isLoading: true }, () => {\n      fetch(`https://rickandmortyapi.com/api/character/${id}`)\n        .then(result => result.json())\n        .then(data => this.setState({ response: data, isLoading: false }))\n    });\n  }\n\n  componentDidMount = () => {\n    this.getCharacter();\n  }\n\n  render() {\n    const { name, image, created, species, gender, status, location, origin, episode } = this.state.response;\n    const locationName = location ? location.name : 'unknown';\n    const originName = origin ? origin.name : 'unknown';\n    const episodeCount = episode ? episode.length : 'unknown';\n\n    return (\n      <div className={'character-detail-container'}>\n        <CharacterPolaroid\n          name={name}\n          image={image}\n          created={created}\n        >\n        </CharacterPolaroid>\n        <div className={'character-information-container'}>\n          <div className={'character-information-form-container'}>\n            <h2>Character Data Sheet</h2>\n            <table className={'character-information-form'}>\n              <tbody>\n                <tr>\n                  <td colSpan={'3'}>\n                    <span className=\"form-label\">name</span>\n                    <span className=\"form-info\">{name}</span>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <span className=\"form-label\">species</span>\n                    <span className=\"form-info\">{species}</span>\n                  </td>\n                  <td>\n                    <span className=\"form-label\">gender</span>\n                    <span className=\"form-info\">{gender}</span>\n                  </td>\n                </tr>\n                <tr>\n                <td>\n                    <span className=\"form-label\">episodes</span>\n                    <span className=\"form-info\">{episodeCount}</span>\n                  </td>\n                  <td>\n                    <span className=\"form-label\">status</span>\n                    <span className=\"form-info\">{status}</span>\n                  </td>\n                </tr>\n                <tr>\n                  <td colSpan={'2'}>\n                    <span className=\"form-label\">location</span>\n                    <span className=\"form-info\">{locationName}</span>\n                  </td>\n                </tr>\n                <tr>\n                  <td colSpan={'2'}>\n                    <span className=\"form-label\">origin</span>\n                    <span className=\"form-info\">{originName}</span>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n            <p className={'form-id'}>RICK AND MORTY CHARACTER DATA FORM ID #2020-42</p>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function Navigation() {\n  return (\n     <ul>\n      <li><Link to=\"/week5-assignment\">Home</Link></li>\n    </ul>\n  );\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.scss';\nimport './RickAndMorty.scss'\nimport CharacterList from './CharacterList';\nimport CharacterDetail from './CharacterDetail';\nimport Navigation from './Navigation';\n\nfunction App() {\n  return (\n    <div className={'main-content-container'}>\n      <Router>\n        <Navigation></Navigation>\n        <Switch>\n          <Route path=\"/week5-assignment/\" exact component={CharacterList} />\n          <Route path=\"/week5-assignment/character/:id\" exact component={CharacterDetail} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}